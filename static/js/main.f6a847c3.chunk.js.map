{"version":3,"sources":["reportWebVitals.ts","Canvas.tsx","views/grid.ts","utils/index.ts","systems/RenderPlayField.ts","models/tetromino.ts","systems/SpawnTetromino.ts","systems/MoveTetromino.ts","systems/throttle.ts","systems/Control.ts","systems/UpdatePlayField.ts","App.ts","systems/Manager.ts","models/playfield.ts","systems/DropTetromino.ts","systems/RenderScore.ts","systems/score.ts","hud/index.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","memo","init","props","ref","view","Application","always","getGridItem","px","py","fillColor","Boolean","width","height","lineWidth","lineColor","grid","Graphics","lineStyle","beginFill","drawRect","endFill","position","set","GridItem","Grid","table","gridWidth","gridHeight","item","layout","Container","addChild","map","row","color","flat","filter","fill","len","value","Array","fillTable","col","Error","mapTable","curry","func","y","x","RenderPlayFieldSystem","app","config","delta","state","playfield","current","stage","removeChild","ifElse","identity","screen","pivot","tetromino","when","blocks","rotate","groupBy","num","arr","newArr","length","push","splice","result","Blocks","type","binary","includes","results","i","block","toString","padStart","split","Number","base","lock","vector","SpawnTetrominoSystem","list","Tetromino","Math","floor","random","inPlayField","playField","min","max","MoveTetrominoSystem","hit","bottom","border","nudge","forEach","exist","hitBlock","hitBottom","hitBorder","half","collide","Object","assign","equals","mergeWith","add","throttle","ms","system","timePassed","ACTION","notFillout","complement","all","fillTo20","KEYMAP","w","UP","s","DOWN","a","LEFT","d","RIGHT","ControlSystem","getKey","keymap","pressing","Set","window","addEventListener","key","delete","KeyBoard","has","main","setState","ticker","systems","update","deltaMS","SystemManager","undefined","clearLines","rest","clear","lines","score","reduce","cleared","scores","totalLines","RenderScoreSystem","Score","style","margin","HUD","id","parentNode","offsetWidth","offsetHeight","App","useState","Canvas","Game","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6a847c3.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React, { memo } from \"react\";\nimport { Application } from \"pixi.js\";\nimport { always } from \"ramda\";\n\ntype ApplicationProps = {\n  autoStart?: boolean;\n  width?: number;\n  height?: number;\n  transparent?: boolean;\n  autoDensity?: boolean;\n  antialias?: boolean;\n  preserveDrawingBuffer?: boolean;\n  resolution?: number;\n  forceCanvas?: boolean;\n  backgroundColor?: number;\n  clearBeforeRender?: boolean;\n  powerPreference?: string;\n  sharedTicker?: boolean;\n  sharedLoader?: boolean;\n  resizeTo?: Window | HTMLElement;\n};\n\ntype Props = ApplicationProps & {\n  init: (app: Application) => void;\n};\n\nexport default memo(\n  ({ init, ...props }: Props) => (\n    <canvas\n      ref={(view: HTMLCanvasElement) =>\n        init(new Application({ view, ...props }))\n      }\n    ></canvas>\n  ),\n  always(true)\n);\n","import { Graphics, Container } from \"pixi.js\";\n\ntype Color = number;\n\ntype GridProps = {\n  px: number;\n  py: number;\n  width: number;\n  height: number;\n  fillColor?: Color;\n  lineWidth?: number;\n  lineColor?: Color;\n};\nfunction GridItem({\n  px,\n  py,\n  width,\n  height,\n  fillColor,\n  lineWidth = 0,\n  lineColor = 0xffffff,\n}: GridProps) {\n  const grid = new Graphics();\n\n  grid.lineStyle(lineWidth, lineColor);\n  grid.beginFill(fillColor);\n  grid.drawRect(0, 0, width - lineWidth, height - lineWidth);\n  grid.endFill();\n\n  grid.position.set(px * width, py * height);\n\n  return grid;\n}\n\nconst getGridItem = (props: Omit<GridProps, \"px\" | \"py\">) => (\n  px: number,\n  py: number,\n  fillColor: number\n) => Boolean(fillColor) && GridItem({ px, py, fillColor, ...props });\n\ntype Props = {\n  table: Color[][];\n  gridWidth: number;\n  gridHeight: number;\n};\nexport default function Grid({ table, gridWidth, gridHeight }: Props) {\n  const item = getGridItem({\n    width: gridWidth,\n    height: gridHeight,\n  });\n\n  const layout = new Container();\n\n  layout.addChild(\n    ...table\n      .map(\n        (row, py) =>\n          row\n            .map((color, px) => item(px, py, color))\n            .flat()\n            .filter(Boolean) as Container[]\n      )\n      .flat()\n  );\n\n  return layout;\n}\n","import { curry } from \"ramda\";\n\nexport function fill<T>(len: number, value: T): T[] {\n  return Array(len).fill(value);\n}\n\nexport function fillTable<T>(row: number, col: number, value: T): T[][] {\n  if (row < 1 || col < 1) {\n    throw new Error(`row and col should be large than 0.`);\n  }\n\n  return Array(row)\n    .fill([])\n    .map(() => fill(col, value));\n}\n\nexport function cloneTable<T>(table: T[][]) {\n  return table.map((arr) => arr.slice());\n}\n\ntype MapFunc<T> = (value: T, [x, y]: [number, number]) => T;\nexport const mapTable = curry(<T>(func: MapFunc<T>, table: T[][]) => {\n  return table.map((row, y) => {\n    return row.map((value, x) => func(value, [x, y]));\n  });\n});\n\nexport function randomPick<T>(list: T[]) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nexport function inRange(min: number, max: number, value: number) {\n  return min <= value && value <= max;\n}\n","import { Application, Container } from \"pixi.js\";\nimport Grid from \"../views/grid\";\nimport { mapTable } from \"../utils\";\nimport { always, identity, ifElse, when } from \"ramda\";\nimport { State } from \"./types\";\n\nexport default function RenderPlayFieldSystem(app: Application) {\n  const config = {\n    gridWidth: 40,\n    gridHeight: 40,\n  };\n\n  let layout = new Container();\n\n  function fresh(table: number[][]) {\n    app.stage.removeChild(layout);\n\n    layout = Grid({\n      table: mapTable(ifElse(Boolean, identity, always(0xffffff)), table),\n      ...config,\n    });\n    layout.position.set(app.screen.width / 2, app.screen.height / 2);\n    layout.pivot.set(layout.width / 2, layout.height / 2);\n    app.stage.addChild(layout);\n  }\n\n  return (delta: number, state: State) => {\n    const { playfield, current } = state;\n\n    fresh(playfield);\n\n    if (current) {\n      const tetromino = Grid({\n        table: mapTable(\n          when(Boolean, always(current.color)),\n          current.blocks[current.rotate]\n        ),\n        ...config,\n      });\n\n      tetromino.position.set(\n        current.position.x * config.gridWidth,\n        current.position.y * config.gridHeight\n      );\n\n      layout.addChild(tetromino);\n    }\n\n    return state;\n  };\n}\n","import { fillTable } from \"../utils\";\n\nexport type TetrominoType = \"I\" | \"J\" | \"L\" | \"O\" | \"S\" | \"T\" | \"Z\";\n\nexport interface ITetromino {\n  type: TetrominoType;\n  color: number;\n  blocks: number[][][];\n  rotate: 0 | 1 | 2 | 3;\n  lock: boolean;\n  position: { x: number; y: number };\n  vector: { x: number; y: number };\n}\n\nfunction groupBy<T>(num: number, arr: T[]) {\n  const newArr = [];\n\n  while (arr.length) {\n    newArr.push(arr.splice(0, num));\n  }\n\n  return newArr;\n}\n\nfunction rotate(blocks: number[][]) {\n  const result = fillTable(blocks.length, blocks[0].length, 0);\n\n  for (let y = 0; y < blocks.length; y++) {\n    for (let x = 0; x < blocks[y].length; x++) {\n      result[x][blocks.length - 1 - y] = blocks[y][x];\n    }\n  }\n\n  return result;\n}\n\nfunction Blocks(type: TetrominoType, binary: number) {\n  const len = [\"I\", \"O\"].includes(type) ? 4 : 3;\n\n  const results: number[][][] = [];\n\n  const rotation = 4;\n  for (let i = 0; i < rotation; i++) {\n    const block = groupBy(\n      len,\n      binary\n        .toString(2)\n        .padStart(len ** 2, \"0\")\n        .split(\"\")\n        .map(Number)\n    );\n\n    if (i === 0) {\n      results.push(block);\n    } else {\n      results.push(rotate(results[i - 1]));\n    }\n  }\n\n  return results;\n}\n\nfunction base(type: TetrominoType, color: number, binary: number): ITetromino {\n  return {\n    type,\n    color,\n    blocks: Blocks(type, binary),\n    rotate: 0,\n    lock: false,\n    position: { x: 0, y: 0 },\n    vector: { x: 0, y: 0 },\n  };\n}\n\nexport function Tetromino(type: TetrominoType) {\n  if (type === \"I\") {\n    return base(type, 0x00f0f0, 3840);\n  }\n\n  if (type === \"J\") {\n    return base(type, 0x0000f0, 312);\n  }\n\n  if (type === \"L\") {\n    return base(type, 0xf0a000, 120);\n  }\n\n  if (type === \"O\") {\n    return base(type, 0xf0f000, 1632);\n  }\n\n  if (type === \"S\") {\n    return base(type, 0x00f000, 240);\n  }\n\n  if (type === \"T\") {\n    return base(type, 0xa000f0, 184);\n  }\n\n  if (type === \"Z\") {\n    return base(type, 0xf00000, 408);\n  }\n\n  throw new Error(`Not support this tetromino type: ${type}`);\n}\n","import { State } from \"./types\";\nimport { Tetromino } from \"../models/tetromino\";\nimport { randomPick } from \"../utils\";\n\nexport default function SpawnTetrominoSystem() {\n  return (delta: number, state: State) => {\n    if (!state.current || state.current?.lock) {\n      const current = Tetromino(\n        randomPick([\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"])\n      );\n\n      state.current = current;\n    }\n\n    return state;\n  };\n}\n","import { ITetromino } from \"../models/tetromino\";\nimport { mergeWith, add, equals } from \"ramda\";\nimport { State } from \"./types\";\nimport { inRange } from \"../utils\";\n\nfunction inPlayField(playField: number[][], x: number) {\n  return inRange(0, playField[0].length - 1, x);\n}\n\nfunction collide(\n  playField: number[][],\n  { blocks, rotate, vector, position }: ITetromino\n) {\n  const hit = {\n    block: false,\n    bottom: false,\n    border: false,\n    nudge: 0,\n  };\n\n  blocks[rotate].forEach((row, py) => {\n    row.forEach((exist, px) => {\n      if (!exist) {\n        return;\n      }\n\n      const x = position.x + vector.x + px;\n      const y = position.y + vector.y + py;\n\n      const hitBlock = playField?.[y]?.[x];\n      const hitBottom = y > playField.length - 1;\n      const hitBorder = !inPlayField(playField, x);\n\n      if (hitBlock) {\n        hit.block = true;\n      }\n\n      if (hitBottom) {\n        hit.bottom = true;\n      }\n\n      if (hitBorder) {\n        hit.border = true;\n\n        const x = position.x + px;\n        const shouldNudge = !inPlayField(playField, x);\n\n        if (shouldNudge) {\n          const half = playField[0].length / 2;\n          hit.nudge = position.x > half ? -1 : 1;\n        }\n      }\n    });\n  });\n\n  return hit;\n}\n\nexport default function MoveTetrominoSystem() {\n  return (delta: number, state: State) => {\n    if (!state.current) {\n      return state;\n    }\n\n    const { playfield, current } = state;\n    const hit = collide(playfield, current);\n\n    if (hit.border) {\n      const { position } = current;\n      Object.assign(current, {\n        position: { x: position.x + hit.nudge, y: position.y },\n        vector: { x: 0, y: 0 },\n      });\n\n      return state;\n    }\n\n    if (hit.bottom || hit.block) {\n      Object.assign(current, {\n        lock: equals(current.vector, { x: 0, y: 1 }),\n        vector: { x: 0, y: 0 },\n      });\n\n      return state;\n    }\n\n    const { position, vector } = current;\n    Object.assign(current, {\n      position: mergeWith(add, position, vector),\n      vector: { x: 0, y: 0 },\n    });\n\n    return state;\n  };\n}\n","import { System, State } from \"./types\";\n\nexport default function throttle(ms: number, system: System) {\n  let timePassed = ms;\n\n  return (delta: number, state: State) => {\n    if (timePassed < ms) {\n      timePassed += delta;\n\n      return state;\n    }\n\n    timePassed = 0;\n\n    return system(delta, state);\n  };\n}\n","import { State } from \"./types\";\n\nenum ACTION {\n  UP = \"UP\",\n  DOWN = \"DOWN\",\n  LEFT = \"LEFT\",\n  RIGHT = \"RIGHT\",\n}\n\nconst KEYMAP: Record<string, ACTION> = {\n  w: ACTION.UP,\n  s: ACTION.DOWN,\n  a: ACTION.LEFT,\n  d: ACTION.RIGHT,\n};\n\nfunction KeyBoard(keymap: Record<string, ACTION>) {\n  const pressing = new Set<ACTION>();\n\n  window.addEventListener(\"keydown\", ({ key }) => {\n    keymap[key] && pressing.add(keymap[key]);\n  });\n  window.addEventListener(\"keyup\", ({ key }) => {\n    keymap[key] && pressing.delete(keymap[key]);\n  });\n\n  return () => pressing;\n}\n\nexport default function ControlSystem() {\n  const getKey = KeyBoard(KEYMAP);\n\n  return (delta: number, state: State) => {\n    if (!state.current) {\n      return state;\n    }\n    const { current } = state;\n    const pressing = getKey();\n\n    if (pressing.has(ACTION.LEFT)) {\n      current.vector.x = -1;\n    }\n\n    if (pressing.has(ACTION.RIGHT)) {\n      current.vector.x = 1;\n    }\n\n    if (pressing.has(ACTION.DOWN)) {\n      current.vector.y = 1;\n    }\n\n    if (pressing.has(ACTION.UP)) {\n      current.rotate = ((current.rotate + 1) % 4) as 0 | 1 | 2 | 3;\n    }\n\n    return state;\n  };\n}\n","import { all, filter, complement } from \"ramda\";\nimport { fill } from \"../utils\";\nimport { State } from \"./types\";\n\nconst notFillout = complement(all(Boolean));\n\nfunction fillTo20(list: number[][]) {\n  while (list.length < 20) {\n    list = [fill(10, 0), ...list];\n  }\n  return list;\n}\n\nexport default function UpdatePlayFieldSystem() {\n  return (delta: number, state: State) => {\n    if (!state.current || !state.current.lock) {\n      return state;\n    }\n\n    const { playfield, current, clearLines } = state;\n    const { blocks, rotate, position, color } = current;\n\n    blocks[rotate].forEach((row, py) => {\n      row.forEach((exist, px) => {\n        if (exist) playfield[py + position.y][px + position.x] = color;\n      });\n    });\n\n    const rest = filter(notFillout)(playfield);\n    const clear = playfield.length - rest.length;\n\n    return {\n      ...state,\n      playfield: fillTo20(rest),\n      clearLines: clear ? [...clearLines, clear] : clearLines,\n    };\n  };\n}\n","import { Application } from \"pixi.js\";\nimport SystemManager from \"./systems/Manager\";\nimport RenderPlayFieldSystem from \"./systems/RenderPlayField\";\nimport SpawnTetrominoSystem from \"./systems/SpawnTetromino\";\nimport DropTetrominoSystem from \"./systems/DropTetromino\";\nimport MoveTetrominoSystem from \"./systems/MoveTetromino\";\nimport PlayField from \"./models/playfield\";\nimport throttle from \"./systems/throttle\";\nimport UpdatePlayFieldSystem from \"./systems/UpdatePlayField\";\nimport ControlSystem from \"./systems/Control\";\nimport RenderScoreSystem from \"./systems/RenderScore\";\n\nexport default function main(app: Application, setState: (state: any) => void) {\n  const systems = SystemManager(app, {\n    playfield: PlayField(),\n    current: undefined,\n    clearLines: [],\n  });\n\n  systems.add(\n    throttle(100, ControlSystem()),\n    SpawnTetrominoSystem(),\n    throttle(1000, DropTetrominoSystem()),\n    MoveTetrominoSystem(),\n    UpdatePlayFieldSystem(),\n    RenderPlayFieldSystem(app),\n    RenderScoreSystem(setState)\n  );\n}\n","import { Application } from \"pixi.js\";\nimport { System, State } from \"./types\";\n\nexport default function SystemManager({ ticker }: Application, state: State) {\n  const systems: System[] = [];\n\n  const update = (system: System) => {\n    state = system(ticker.deltaMS, state);\n  };\n\n  ticker.add(() => systems.forEach(update));\n\n  return {\n    add: (...system: System[]) => systems.push(...system),\n  };\n}\n","import { fillTable } from \"../utils\";\n\nexport default function PlayField(): number[][] {\n  return fillTable(20, 10, 0);\n}\n","import { State } from \"./types\";\n\nexport default function DropTetrominoSystem() {\n  return (delta: number, state: State) => {\n    if (state.current) {\n      state.current.vector.y = 1;\n    }\n\n    return state;\n  };\n}\n","import { State } from \"./types\";\nimport toScore from \"./score\";\n\nexport default function RenderScoreSystem(setState: (state: any) => void) {\n  return (delta: number, state: State) => {\n    const { clearLines } = state;\n\n    setState({ score: toScore(clearLines) });\n\n    return state;\n  };\n}\n","export default function toScore(lines: number[]) {\n  return lines.reduce(\n    ({ scores, totalLines }, cleared) => ({\n      scores:\n        scores +\n        [0, 40, 100, 300, 1200][cleared] * (Math.floor(totalLines / 10) + 1),\n      totalLines: totalLines + cleared,\n    }),\n    { scores: 0, totalLines: 0 }\n  ).scores;\n}\n","import React from \"react\";\n\nfunction Score({ score }: { score: number }) {\n  return (\n    <h5\n      style={{\n        margin: `${16}px`,\n      }}\n    >\n      Scores: {score}\n    </h5>\n  );\n}\n\ntype Props = {\n  score: number;\n};\nexport default function HUD({ score }: Props) {\n  return (\n    <div\n      id=\"HUD\"\n      ref={(ref) => {\n        if (!ref) {\n          return;\n        }\n\n        const { offsetWidth, offsetHeight } = ref.parentNode as HTMLElement;\n        ref.style.width = `${offsetWidth}px`;\n        ref.style.height = `${offsetHeight}px`;\n      }}\n    >\n      <Score score={score} />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport Canvas from \"./Canvas\";\nimport Game from \"./App\";\nimport HUD from \"./hud\";\n\nconst config = {\n  width: 900,\n  height: 1200,\n};\n\nfunction App() {\n  const [state, setState] = useState({\n    score: 0,\n  });\n\n  return (\n    <>\n      <Canvas init={(app) => Game(app, setState)} {...config} />\n\n      <HUD {...state} />\n    </>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}